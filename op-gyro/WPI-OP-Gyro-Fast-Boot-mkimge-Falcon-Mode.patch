From 4c2d05ae3370fadd50aba112cacefef0de0b85ee Mon Sep 17 00:00:00 2001
From: "wpi.ray" <ray.zhang@wpi-group.com>
Date: Thu, 1 Aug 2024 09:48:46 +0800
Subject: [PATCH] WPI: OP-Gyro: Fast Boot: Falcon Mode

---
 iMX9/mkimage_fit_atf.sh   | 195 ++++++++++++++++++++++++++++++++++++++
 iMX9/soc.mak              |   2 +-
 mkimage_fit_atf_kernel.sh |  91 ++++++++++++++++++
 3 files changed, 287 insertions(+), 1 deletion(-)
 create mode 100755 iMX9/mkimage_fit_atf.sh
 create mode 100755 mkimage_fit_atf_kernel.sh

diff --git a/iMX9/mkimage_fit_atf.sh b/iMX9/mkimage_fit_atf.sh
new file mode 100755
index 0000000..28ab674
--- /dev/null
+++ b/iMX9/mkimage_fit_atf.sh
@@ -0,0 +1,195 @@
+#!/bin/sh
+#
+# script to generate FIT image source for i.MX9 boards with
+# ARM Trusted Firmware and multiple device trees (given on the command line)
+#
+# usage: $0 <dt_name> [<dt_name> [<dt_name] ...]
+#
+# How to use:
+# cd iMX9
+# DEK_BLOB_LOAD_ADDR=0x80400000 TEE_LOAD_ADDR=0x96000000 ATF_LOAD_ADDR=0x204e0000 ./mkimage_fit_atf.sh imx93-11x11-evk.dtb > u-boot.its
+# ./mkimage_uboot -E -p 0x3000 -f u-boot.its u-boot.itb
+
+[ -z "$BL31" ] && BL31="bl31.bin"
+
+# keep backward compatibility
+[ -z "$TEE_LOAD_ADDR" ] && TEE_LOAD_ADDR="0x96000000"
+
+if [ -z "$ATF_LOAD_ADDR" ]; then
+	echo "ERROR: BL31 load address is not set" >&2
+	exit 0
+fi
+
+if [ ! -f $BL31 ]; then
+	echo "ERROR: BL31 file $BL31 NOT found" >&2
+	exit 0
+else
+	echo "$BL31 size: " >&2
+	ls -lct $BL31 | awk '{print $5}' >&2
+fi
+
+[ -z "$BL32" ] && BL32="tee.bin"
+LOADABLES="\"atf-1\""
+
+PAD=../scripts/pad_image.sh
+
+if [ ! -f $BL32 ]; then
+	BL32=/dev/null
+else
+	echo "Building with TEE support, make sure $BL31 is compiled with spd. If you do not want tee, please delete $BL32" >&2
+	if [ $TEE_COMPRESS_ENABLE ]; then
+		echo "Start compress $BL32" >&2
+		rm -f $BL32.lz4
+		lz4 -9 $BL32 $BL32.lz4 >&2
+		BL32=$BL32.lz4
+		./$PAD $BL32 >&2
+	fi
+	echo "$BL32 size: " >&2
+	ls -lct $BL32 | awk '{print $5}' >&2
+	LOADABLES="$LOADABLES, \"tee-1\""
+fi
+
+[ -z "$BL33" ] && BL33="u-boot-nodtb.bin"
+DEK_BLOB="dek_blob_fit_dummy.bin"
+
+if [ ! -f $DEK_BLOB ]; then
+	DEK_BLOB=/dev/null
+else
+	echo "Building with encrypted boot support, make sure to replace DEK Blob in final image." >&2
+	LOADABLES="\"dek_blob-1\", $LOADABLES"
+fi
+
+if [ ! -f $BL33 ]; then
+	echo "ERROR: $BL33 file NOT found" >&2
+	exit 0
+else
+
+	echo "$BL33 size: " >&2
+	ls -lct $BL33 | awk '{print $5}' >&2
+fi
+
+for dtname in $*
+do
+	echo "$dtname size: " >&2
+	ls -lct $dtname | awk '{print $5}' >&2
+done
+
+cat << __HEADER_EOF
+/dts-v1/;
+
+/ {
+	description = "Configuration to load ATF before U-Boot";
+	#address-cells = <1>;
+
+	images {
+		uboot-1 {
+			description = "U-Boot (64-bit)";
+			data = /incbin/("$BL33");
+			type = "standalone";
+			arch = "arm64";
+			os = "u-boot";
+			compression = "none";
+			load = <0x80200000>;
+		};
+__HEADER_EOF
+
+cnt=1
+for dtname in $*
+do
+	cat << __FDT_IMAGE_EOF
+		fdt-$cnt {
+			description = "$(basename $dtname .dtb)";
+			data = /incbin/("$dtname");
+			type = "flat_dt";
+			compression = "none";
+		};
+__FDT_IMAGE_EOF
+cnt=$((cnt+1))
+done
+
+cat << __HEADER_EOF
+		atf-1 {
+			description = "ARM Trusted Firmware";
+			data = /incbin/("$BL31");
+			type = "firmware";
+			arch = "arm64";
+			compression = "none";
+			load = <$ATF_LOAD_ADDR>;
+			entry = <$ATF_LOAD_ADDR>;
+		};
+__HEADER_EOF
+
+if [ -f $BL32 ]; then
+cat << __HEADER_EOF
+		tee-1 {
+			description = "TEE firmware";
+			data = /incbin/("$BL32");
+			type = "firmware";
+			arch = "arm64";
+			compression = "none";
+			load = <$TEE_LOAD_ADDR>;
+			entry = <$TEE_LOAD_ADDR>;
+		};
+__HEADER_EOF
+fi
+
+if [ -f $DEK_BLOB ]; then
+cat << __HEADER_EOF
+		dek_blob-1 {
+			description = "dek_blob";
+			data = /incbin/("$DEK_BLOB");
+			type = "script";
+			compression = "none";
+			load = <$DEK_BLOB_LOAD_ADDR>;
+		};
+__HEADER_EOF
+fi
+
+cat << __CONF_HEADER_EOF
+	};
+	configurations {
+		default = "config-1";
+
+__CONF_HEADER_EOF
+
+cnt=1
+for dtname in $*
+do
+if [ -f $BL32 ]; then
+if [ $ROLLBACK_INDEX_IN_FIT ]; then
+cat << __CONF_SECTION_EOF
+		config-$cnt {
+			description = "$(basename $dtname .dtb)";
+			firmware = "uboot-1";
+			loadables = $LOADABLES;
+			fdt = "fdt-$cnt";
+			rbindex = "$ROLLBACK_INDEX_IN_FIT";
+		};
+__CONF_SECTION_EOF
+else
+cat << __CONF_SECTION_EOF
+		config-$cnt {
+			description = "$(basename $dtname .dtb)";
+			firmware = "uboot-1";
+			loadables = $LOADABLES;
+			fdt = "fdt-$cnt";
+		};
+__CONF_SECTION_EOF
+fi
+else
+cat << __CONF_SECTION1_EOF
+		config-$cnt {
+			description = "$(basename $dtname .dtb)";
+			firmware = "uboot-1";
+			loadables = $LOADABLES;
+			fdt = "fdt-$cnt";
+		};
+__CONF_SECTION1_EOF
+fi
+cnt=$((cnt+1))
+done
+
+cat << __ITS_EOF
+	};
+};
+__ITS_EOF
diff --git a/iMX9/soc.mak b/iMX9/soc.mak
index b17db6b..dd3b0a6 100644
--- a/iMX9/soc.mak
+++ b/iMX9/soc.mak
@@ -1,7 +1,7 @@
 MKIMG = ../mkimage_imx8
 
 CC ?= gcc
-REV ?= A0
+REV ?= A1
 OEI ?= NO
 MSEL ?= 0
 CFLAGS ?= -O2 -Wall -std=c99 -static
diff --git a/mkimage_fit_atf_kernel.sh b/mkimage_fit_atf_kernel.sh
new file mode 100755
index 0000000..c660e48
--- /dev/null
+++ b/mkimage_fit_atf_kernel.sh
@@ -0,0 +1,91 @@
+#!/bin/sh
+
+## This script creates the FIT source image (.its) which includes ATF and Kernel.
+## How to use on i.MX8M:
+# cd iMX8M
+## for i.MX8MM
+# ATF_LOAD_ADDR=0x00920000 KERNEL_LOAD_ADDR=0x40200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## for i.MX8MN
+# ATF_LOAD_ADDR=0x00960000 KERNEL_LOAD_ADDR=0x40200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## for i.MX8MP
+# ATF_LOAD_ADDR=0x00970000 KERNEL_LOAD_ADDR=0x40200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## To generate the FIT binary run:
+# ./mkimage_uboot -E -p 0x3000 -f Image.its Image.itb
+## ------------------------------------------------------------------------------------------------
+## How to use on i.MX93:
+# cd iMX9
+# ATF_LOAD_ADDR=0x204e0000 KERNEL_LOAD_ADDR=0x80200000 ../mkimage_fit_atf_kernel.sh > Image.its
+## To generate the FIT binary run:
+# ./mkimage_uboot -E -p 0x3000 -f Image.its Image.itb
+
+[ -z "$BL31" ] && BL31="bl31.bin"
+
+if [ ! -f $BL31 ]; then
+	echo "ERROR: BL31 file $BL31 NOT found" >&2
+	exit 0
+else
+	echo "$BL31 size: " >&2
+	ls -lct $BL31 | awk '{print $5}' >&2
+fi
+
+if [ -z "$ATF_LOAD_ADDR" ]; then
+	echo "ERROR: BL31 load address is not set" >&2
+	exit 0
+fi
+
+[ -z "$KERNEL_IMAGE" ] && KERNEL_IMAGE="Image"
+
+if [ ! -f $KERNEL_IMAGE ]; then
+	echo "ERROR: Kernel file $KERNEL_IMAGE NOT found" >&2
+	exit 0
+else
+	echo "$KERNEL_IMAGE size: " >&2
+	ls -lct $KERNEL_IMAGE | awk '{print $5}' >&2
+fi
+
+if [ -z "$KERNEL_LOAD_ADDR" ]; then
+	echo "ERROR: Kernel load address is not set" >&2
+	exit 0
+fi
+
+cat << __HEADER_EOF
+/dts-v1/;
+
+/ {
+	description = "Image file for i.MX8M Linux Kernel";
+	#address-cells = <1>;
+
+	images {
+
+		kernel {
+			description = "AARM64 Linux kernel";
+			data = /incbin/("$KERNEL_IMAGE");
+			type = "kernel";
+			arch = "arm64";
+			compression = "none";
+			load = <$KERNEL_LOAD_ADDR>;
+			entry = <$KERNEL_LOAD_ADDR>;
+		};
+
+		atf-1 {
+			description = "ARM Trusted Firmware";
+			data = /incbin/("$BL31");
+			arch = "arm64";
+			type = "firmware";
+			compression = "none";
+			load = <$ATF_LOAD_ADDR>;
+			entry = <$ATF_LOAD_ADDR>;
+		};
+	};
+
+	configurations {
+		default = "config-1";
+		config-1 {
+			description = "Boot Linux kernel";
+			kernel = "kernel";
+			firmware = "atf-1";
+			loadables = "kernel";
+		};
+	};
+};
+__HEADER_EOF
-- 
2.25.1

